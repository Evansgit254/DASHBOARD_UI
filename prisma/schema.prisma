// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin{
  id String @id
  username String @unique

}

model Student{
  id String @id
  username String @unique
  name String
  surname String
  email String?
  phone String?
  address String
  img String?
  bloodType String
  sex UserSex
  createdAt DateTime @default(now())
  parentId String
  parent Parent @relation(fields:[parentId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  gradeId Int
  class Grade @relation(fields: [gradeId], references: [id])
}

model Teacher{
  id String @id
  username String @unique
  name String
  surname String
  email String?
  phone String?
  address String
  img String?
  bloodType String
  sex UserSex
  createdAt DateTime @default(now())
  subjects Subject[]
  lessons Lesson[]
  classes Class[] 
}

model Parent{
  id String @id
  username String @unique
  name String
  surname String
  email String?
  phone String?
  address String
  createdAt DateTime @default(now())
  students Student[]
}

model Grade{
  id Int @id @default(autoincrement())
  level String @unique

  students Student[]
  classes Class[]
}

model Class{
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  supervisorId String
  supervisor Teacher @relation(fields: [supervisorId], references: [id])
  lessons Lesson[]
  student Student[]
  gradeId Int
  class Grade @relation(fields: [gradeId], references: [id])

}

model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson{
  name String
  day Day
  startTime DateTime
  endTime DateTime

  subjectId Int
  subject Subject @relation(fields: [subjectId], references: [id])
  classId Int
  class Class @relation(fields: [classId], references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  Assignments Assignment[]
}

model Exam{
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references:[id])
  Result[]
}

model Assignment{
  id Int @id @default(autoincrement())
  title String
  startDate DateTime
  dueDate DateTime

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references:[id])
  results Result[]
}

model Result{
  id Int @id @default(autoincrement())
  score Int

  examId Int
  exam Exam @relation(fiels: [examId], references:[id])
  AssignmentId Int
  assignment Assignment @relation(fiels: [AssignmentId], references:[id])
}

//model Attedance{}

//model Event{}

//model Announcement{}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
